# Create a new file: src/core/dess_system.py

import numpy as np
from .energy_profile_config import DESSConfig

class DESS:
    """Manages the state and logic of the Decentralized Energy Supply System."""

    def __init__(self, config: DESSConfig, time_step_h: float):
        self.config = config
        self.time_step_h = time_step_h # E.g., 0.25 for 15 minutes

        # Initial state variables
        self.battery_soc_kwh = 0.0  # Battery State of Charge in kWh
        self.h2_storage_kg = 0.0    # Stored hydrogen in kg

    def get_state(self):
        """Returns the current normalized state (between 0 and 1)."""
        return np.array([
            self.battery_soc_kwh / self.config.battery_capacity_kwh,
            self.h2_storage_kg / self.config.h2_storage_capacity_kg
        ])

    def step(self, power_to_battery_kw, power_to_electrolyzer_kw, power_from_fuel_cell_kw):
        """
        Executes the energy actions for a time step and updates the state.
        Positive values for 'power_to_battery' charge, negative discharge.
        """
        # 1. Battery logic
        # Charge
        if power_to_battery_kw > 0:
            charge_power = min(power_to_battery_kw, self.config.battery_max_charge_kw)
            energy_to_add = charge_power * self.time_step_h * self.config.battery_charge_efficiency
            available_space = self.config.battery_capacity_kwh - self.battery_soc_kwh
            actual_energy_added = min(energy_to_add, available_space)
            self.battery_soc_kwh += actual_energy_added
            power_consumed_by_battery = actual_energy_added / (self.time_step_h * self.config.battery_charge_efficiency)
        # Discharge
        elif power_to_battery_kw < 0:
            discharge_power = min(abs(power_to_battery_kw), self.config.battery_max_discharge_kw)
            energy_to_supply = discharge_power * self.time_step_h
            available_energy = self.battery_soc_kwh * self.config.battery_discharge_efficiency
            actual_energy_supplied = min(energy_to_supply, available_energy)
            self.battery_soc_kwh -= actual_energy_supplied / self.config.battery_discharge_efficiency
            power_consumed_by_battery = -actual_energy_supplied / self.time_step_h
        else:
            power_consumed_by_battery = 0

        # 2. Electrolyzer logic
        power_to_electrolyzer_kw = min(power_to_electrolyzer_kw, self.config.electrolyzer_capacity_kw)
        energy_consumed = power_to_electrolyzer_kw * self.time_step_h
        h2_produced_kg = energy_consumed / self.config.electrolyzer_efficiency_kwh_per_kg
        available_h2_space = self.config.h2_storage_capacity_kg - self.h2_storage_kg
        actual_h2_produced = min(h2_produced_kg, available_h2_space)
        self.h2_storage_kg += actual_h2_produced
        power_consumed_by_electrolyzer = (actual_h2_produced * self.config.electrolyzer_efficiency_kwh_per_kg) / self.time_step_h

        # 3. Fuel cell logic
        power_from_fuel_cell_kw = min(power_from_fuel_cell_kw, self.config.fuel_cell_capacity_kw)
        energy_produced = power_from_fuel_cell_kw * self.time_step_h
        h2_needed_kg = energy_produced * self.config.fuel_cell_efficiency_kg_per_kwh
        actual_h2_consumed = min(h2_needed_kg, self.h2_storage_kg)
        self.h2_storage_kg -= actual_h2_consumed
        power_generated_by_fuel_cell = (actual_h2_consumed / self.config.fuel_cell_efficiency_kg_per_kwh) / self.time_step_h

        # Returns the net power consumed/generated by the DESS components
        net_power_dess = power_consumed_by_battery + power_consumed_by_electrolyzer - power_generated_by_fuel_cell
        return net_power_dess